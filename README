
==========
Perf2Store
==========

Introduction
------------

"Perf2Store" is a Nagios plugin to send metrology data to StoreMe, Vigilo
Project's metrology service.

Most Nagios plugins can return metrology data using the perfdata syntax: at the
end of the return string, a pipe is added, then the various "name=value"
couples. This is explained in the Nagios documentation. For example, the HTTP
plugin can return the response time and the page size.

Then Nagios can redirect this data to a handler. The Perf2Store plugin is this
handler, and forwards the data to a StoreMe instance on the network, using the
StoreMe protocol.

This protocol is very simple : it is composed of text-based UDP packets
formatted in the following way : <indicator>;<timestamp>;<value>

Perf2Store is written in Perl to run in Nagios' embedded interpretor and thus
consume less system resources.

The dependencies are:
- perl
- nagios

Perf2Store uses configuration files to map Nagios' indicators to StoreMe's
indicators. These configuration files are written in Perl, and must follow its
syntax. They must all be placed in a folder which will be given to the
perf2store script on the command line. There must be a file for each supervised
host, and the filename must be named using the following code: the "perf-"
prefix, the hostname, and the ".pm" suffix. The precise syntax can be found in
the example "perf2store.conf.pm.dist" file.


Installation
------------

- Put the perf2store file in Nagios' plugins directory (usually
  /usr/lib/nagios/plugins)
- Make it executable
- Activate the plugin in Nagios using the instructions in the next section
- Write the configuration scripts for each supervised host
- Restart Nagios


Configuration
-------------

Perf2Store is setup in two places:
- activation in Nagios (and configuration of the plugin's arguments)
- mapping between Nagios' indicators and StoreMe's

Activation in Nagios
~~~~~~~~~~~~~~~~~~~~
The perfdata handler is setup in 3 steps in Nagios:
- configuration if the command to call the plugin. This is usually done in
  Nagios' command file, and can look like this::

  define command{
    command_name process-service-perfdata
    command_line /usr/lib/nagios/plugins/perf2store -p /etc/vigilo-perf2store/ -H '$HOSTNAME$' -s '$SERVICEDESC$' -a '$SERVICESTATE$' -t '$LASTSERVICECHECK$' -v '$SERVICEPERFDATA$'
  }
  define command{
    command_name process-host-perfdata
    command_line /usr/lib/nagios/plugins/perf2store -p /etc/vigilo-perf2store/ -H '$HOSTNAME$' -s 'HOST' -a '$HOSTSTATE$' -t '$LASTHOSTCHECK$' -v '$HOSTPERFDATA$'
  }

- activation of Nagios' perfdata handling. This is usually done in the
  nagios.conf file::

  process_performance_data=1
  host_perfdata_command=process-host-perfdata
  service_perfdata_command=process-service-perfdata


Mapping
~~~~~~~
The mapping between Nagios' indicators and StoreMe's is done in a directory (by
default /etc/vigilo-perf2store) containing a file per host, and which filename
is the "perf-" prefix, the hostname, and the ".pm" suffix. By default, the
directory is /etc/vigilo-perf2store.

These files are in Perl and must respect its syntax. An example is available in
the perf2store.conf.pm.dist file.

A host file defines a hashmap with 3 entries:
- "IPAddress": the address if the StoreMe server where the data must be sent
- "port": the UDP port on which StoreMe listens
- "map": the mapping itself. The value is another hashmap with the StoreMe
  indicator name as keys, and (yet) another hashmap as values. This last hashmap
  has 2 entries:
  - var: Nagios' indicator name
  - ds: the indicator name to send to StoreMe. This name may contain a slash
	("/"), in which case a subfolder will be created. In the proposed
	architecture in StoreMe's documentation, the value is "<hostname>/<indicator
	name base64-encoded>" (see StoreMe's README to learn the reason for this
	encoding).


Contact
-------

Feel free to contact us via the Vigilo website: <http://vigilo-project.org>





# vim:set textwidth=80:
