#!/usr/bin/perl -w
################################################################################
## Nagios perfdata to Vigilo bridge
##
## Copyright (C) 2007-2016 CS-SI
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#################################################################################
#
package perfdata2vigilo;

use POSIX;
use strict;
use Getopt::Long;
&Getopt::Long::config('bundling');
#use Data::Dumper;

my $status;
my ($opt_V, $opt_h, $opt_c, $opt_H, $opt_d, $opt_s, $opt_t, $opt_a, $opt_v);
our ($path, $connector_socket);
my $debug;


my $print_help = sub() {
    printf "Nagios perfdata to Vigilo bridge\n";
    printf "\nUsage:\n";
    printf "   -V (--version)    Plugin version\n";
    printf "   -H (--hostname)   Hostname\n";
    printf "   -c (--conf)       config file path (/etc/vigilo/perfdata2vigilo/general.conf)\n";
    printf "   -s (--service)    service from which perfdata are retrieved (do not use this option for host perfdata)\n";
    printf "   -t (--timestamp)  last check timestamp\n";
    printf "   -a (--state)      last check state (OK, UP, WARNING...)\n";
    printf "   -v (--values)     perfdata output (protect with quotes)\n\n";
    printf "   -h (--help)       usage help \n\n";
    printf "   -d (--debug)      debug \n\n";
};

$status = GetOptions(
        "V"     => \$opt_V, "version"      => \$opt_V,
        "h"     => \$opt_h, "help"         => \$opt_h,
        "d"     => \$opt_d, "debug"        => \$opt_d,
        "H=s"   => \$opt_H, "hostname=s"   => \$opt_H,
        "c=s"   => \$opt_c, "conf=s"       => \$opt_c,
        "s=s"   => \$opt_s, "service=s"    => \$opt_s,
        "t=i"   => \$opt_t, "timestamp=i"  => \$opt_t,
        "a=s"   => \$opt_a, "state=s"      => \$opt_a,
        "v=s"   => \$opt_v, "values=s"     => \$opt_v,
        );


&$print_help() && exit 1 if ($status == 0);
printf "0.5\n" && exit 0 if ($opt_V);
&$print_help() && exit 0 if ($opt_h);
$debug = 1 if ($opt_d);

die("Please provide an hostname\n")                                      if (! $opt_H);
unless (defined $opt_c) { $opt_c = "@CONFDIR@/general.conf"; }
$opt_s = ""                                                              if (! $opt_s);
die("Please provide a service/host state (-a)\n")                        if (! $opt_a);
die("Please provide a perfdata output (-v)\n")                           if (! $opt_v);
die("Please provide a timestamp (-t)\n")                                 if (! $opt_t);

exit(0) if ($opt_v eq "");

## Load the main configuration file
do $opt_c;

if (! $path) {
    die("Provide a pathname for the configuration files directory\n");
} elsif (! -x $path) {
    die("Provide an existing conf path: $path\n");
}
if (! $connector_socket) {
    die("Provide the path to the nagios connector socket\n");
}

eval {require "$path/perf-$opt_H.pm";} || exit(0);

use IO::Socket::UNIX;

my @vals=split(/[,;: ]+/,$opt_v);
foreach my $i (@vals)
{
    if ($i =~ /=/)
    {
        my ($name, $value) = split(/ *= */, $i);
        if (exists $perf::host{$opt_s})
        {
            $value =~ s/[^-0123456789eE\.]//g;
            foreach my $h (@{$perf::host{$opt_s}})
            {
                if($name eq $h->{"var"})
                {
                    my $hostname;
                    if ($h->{"reRouteFor"})
                    {
                        $hostname = $h->{"reRouteFor"};
                    }
                    else
                    {
                        $hostname = $opt_H;
                    }
                    my $message = "perf|$opt_t|$hostname|".$h->{"ds"}."|$value" ;
                    my $sock = IO::Socket::UNIX->new( Type => IO::Socket::SOCK_STREAM, Peer => $connector_socket) or die ("error while trying to open socket to $connector_socket");
                    $sock->send("$message\n");
                    print "send2Metro : $message\n" if ($debug);
                    $sock->close();
                }
            }
        }
        elsif ($debug)
        {
            print "$name not found\n";
        }
    }
}

