#!/usr/bin/perl -w
################################################################################
## Nagios perfdata to Vigilo bridge
##
## Copyright (C) 2007-2020 CS GROUP â€“ France
##
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#################################################################################
#
package perfdata2vigilo;

use POSIX;
use strict;
use Getopt::Long;
&Getopt::Long::config('bundling');
#use Data::Dumper;

my $status;
my ($opt_V, $opt_h, $opt_c, $opt_H, $opt_d, $opt_s, $opt_t, $opt_a, $opt_v);
our ($path, $connector_socket);
my $debug;


my $print_help = sub() {
    printf "Nagios perfdata to Vigilo bridge\n";
    printf "\nUsage:\n";
    printf "   -V (--version)    Plugin version\n";
    printf "   -H (--hostname)   Hostname\n";
    printf "   -c (--conf)       config file path (/etc/vigilo/perfdata2vigilo/general.conf)\n";
    printf "   -s (--service)    service from which perfdata are retrieved (do not use this option for host perfdata)\n";
    printf "   -t (--timestamp)  last check timestamp\n";
    printf "   -a (--state)      last check state (OK, UP, WARNING...)\n";
    printf "   -v (--values)     perfdata output (protect with quotes)\n\n";
    printf "   -h (--help)       usage help \n\n";
    printf "   -d (--debug)      debug \n\n";
};

$status = GetOptions(
        "V"     => \$opt_V, "version"      => \$opt_V,
        "h"     => \$opt_h, "help"         => \$opt_h,
        "d"     => \$opt_d, "debug"        => \$opt_d,
        "H=s"   => \$opt_H, "hostname=s"   => \$opt_H,
        "c=s"   => \$opt_c, "conf=s"       => \$opt_c,
        "s=s"   => \$opt_s, "service=s"    => \$opt_s,
        "t=i"   => \$opt_t, "timestamp=i"  => \$opt_t,
        "a=s"   => \$opt_a, "state=s"      => \$opt_a,
        "v=s"   => \$opt_v, "values=s"     => \$opt_v,
        );


&$print_help() && exit 1 if ($status == 0);
printf "0.5\n" && exit 0 if ($opt_V);
&$print_help() && exit 0 if ($opt_h);
$debug = 1 if ($opt_d);

die("Please provide an hostname\n")                                      if (! $opt_H);
unless (defined $opt_c) { $opt_c = "@CONFDIR@/general.conf"; }
$opt_s = ""                                                              if (! $opt_s);
die("Please provide a service/host state (-a)\n")                        if (! $opt_a);
die("Please provide a perfdata output (-v)\n")                           if (! defined($opt_v));
die("Please provide a timestamp (-t)\n")                                 if (! $opt_t);

exit(0) if ($opt_v eq "");

## Load the main configuration file
do $opt_c;

if (! $path) {
    die("Provide a pathname for the configuration files directory\n");
} elsif (! -x $path) {
    die("Provide an existing conf path: $path\n");
}
if (! $connector_socket) {
    die("Provide the path to the nagios connector socket\n");
}

eval {require "$path/perf-$opt_H.pm";} || exit(0);

use IO::Socket::UNIX;

my $exists = exists $perf::host{$opt_s};
my $sock = undef;

# The performance data uses the following general syntax:
# 'label'=value[UOM1];[warn];[crit];[min];[max]
#
# General rules (taken from https://nagios-plugins.org/doc/guidelines.html#AEN200):
# - There is one such block per metric, with the various blocks separated by spaces.
# - The single quotes around the label are optional, unless the label contains spaces.
# - Single quotes may also be used by doubling them.
#   NOTE: we do not support labels containing single quotes.
# - The [UOM], [warn], [crit], [min] & [max] fields may all be empty,
#   with trailing semi-colons being optional.
# - The value must match this regex: "[-0-9.]*" (minus the quotes),
#   but may also be "U" if the value is unknown/could not be determined.
#   In practice, some checks are known to return values in scientific notation.
#   Some checks may also use "u" instead of "U" for unknown values.
#   We chose to tolerate them by allowing those special cases.
# - [UOM] (unit of measurement) is taken from a fixed list of possible units.
#
# Here's a few examples of valid performance data:
#   rta=1.2 loss=0%
#   'some metric'=42;10;20;0;100
#   l''horreur1=23 'l''horreur2'=108
while ($opt_v =~ /('(?P<label>[^'=]+)'|(?P<label>[^=]+))=(?P<value>([-0-9.eE]+|[uU]))(?P<unit>[^ ;]*)[^ ]* ?/g)
{
    my ($name, $value, $unit) = ($+{label}, $+{value}, $+{unit});

    if (!$exists)
    {
        print "$name not found\n" if $debug;
        last;
    }

    foreach my $h (@{$perf::host{$opt_s}})
    {
        if ($name eq $h->{"var"})
        {
            my $hostname;
            if ($h->{"reRouteFor"})
            {
                $hostname = $h->{"reRouteFor"};
            }
            else
            {
                $hostname = $opt_H;
            }

            if (!defined($sock))
            {
                $sock = IO::Socket::UNIX->new( Type => IO::Socket::SOCK_STREAM, Peer => $connector_socket)
                    or die ("error while trying to open socket to $connector_socket");
            }

            my $message = "perf|$opt_t|$hostname|".$h->{"ds"}."|$value" ;
            $sock->send("$message\n");
            print "send2Metro : $message\n" if ($debug);
            last;
        }
    }
}

if (defined($sock))
{
    $sock->close();
}
